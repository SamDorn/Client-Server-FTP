
Skip to content

    Pricing

Sign in
Sign up
ggfat /
tris
Public

Code
Issues
Pull requests
Actions
Projects
Security

    Insights

tris/src/index.js /
@ggfat
ggfat Punto 6 completato
Latest commit 45a0b0e on 29 Dec 2019
History
1 contributor
270 lines (246 sloc) 6.23 KB
import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';

function Square(props) {
  return (
    <button className={"square " + props.nomeclasse} onClick={props.onClick}>
      {props.value}
    </button>
  );
}

class Board extends React.Component {
  renderSquare(i) {
    return (
      <Square
        value={this.props.squares[i]}
        onClick={() => this.props.onClick(i)}
        nomeclasse={this.props.classequadrato[i]}
        key={i}
      />
    );
  }

  renderRow(i,rows){
    let leg = "";
    if(i===0){
      leg = 'd';
    }
    if(i===3){
      leg = 'e';
    }
    if(i===6){
      leg = 'f';
    }
    return (
      <div className="board-row" key={i}>
        <div className="legenda">{leg}</div>
        {rows[i]}{rows[i+1]}{rows[i+2]}
      </div>
    );
  }

  render() {
    let rows = [];
    for (let i = 0; i < 9; i++) {
      rows[i] = this.renderSquare(i);
    }

    let element = [];
    for (let i = 0; i < 9; i=i+3) {
      element[i] = this.renderRow(i, rows);
    }

    return (
      <div>
        <div className="legenda"> </div>
        <div className="legenda">a</div>
        <div className="legenda">b</div>
        <div className="legenda">c</div>
        {element}
      </div>
    );
  }
}

class MyList extends React.Component {
  render() {
    return(
       <li key={this.props.k}>
        <button className={this.props.klass} onClick={() => this.props.onClick()}>{this.props.desc}</button> {this.props.mossa}
       </li>
    )
  }
}


class Game extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      history: [
        {
          squares: Array(9).fill(null),
          posizione: Array(9).fill(null),
          mossaAttiva: Array(9).fill(null),
          currentM: Array(9).fill(null),
          classequadrato: Array(9).fill().map((v, i) => "nero"),
        }
      ],
      stepNumber: 0,
      xIsNext: true,
  		ascendingOrder: true,
    };
  }

  handleClick(i) {
    const history = this.state.history.slice(0, this.state.stepNumber + 1);
    const current = history[history.length - 1];
    const squares = current.squares.slice();
    const posizione = current.posizione.slice();
    const mossaAttiva = current.mossaAttiva.slice();
    const currentM = current.currentM.slice();
    const classequadrato = current.classequadrato.slice();
    if (calculateWinner(squares) || squares[i]) {
      return;
    }
    squares[i] = this.state.xIsNext ? "X" : "O";
    posizione[i] = calcola_posizione(i);
    mossaAttiva[this.state.stepNumber] = i;
    resetMossa(currentM);
    currentM[i] = "bold";
    this.setState({
      history: history.concat([
        {
          squares: squares,
          posizione: posizione,
          currentM: currentM,
          mossaAttiva: mossaAttiva,
          classequadrato: classequadrato
        }
      ]),
      stepNumber: history.length,
      xIsNext: !this.state.xIsNext,
    });
  }

  jumpTo(step) {
    this.setState({
      stepNumber: step,
      xIsNext: (step % 2) === 0,
    });
  }

  toggleOrder() {
  	this.setState({
  		ascendingOrder: !this.state.ascendingOrder
  	});
  }


  render() {
    const history = this.state.history;
    const current = history[this.state.stepNumber];
    const winner = calculateWinner(current.squares);
    const posizione = current.posizione;
    const mossaAttiva = current.mossaAttiva;
    const currentM = current.currentM;
    const moves = history.map((step, move) => {
          const currentMossa = mossaAttiva[move-1];
          const mossa = posizione[currentMossa] ? 'Mossa '+ posizione[currentMossa] : '';
        